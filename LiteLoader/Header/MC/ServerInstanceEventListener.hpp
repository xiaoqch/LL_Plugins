// This Header is auto generated by BDSLiteLoader Toolchain
#pragma once
#define AUTO_GENERATED
#include "../Global.h"

#define BEFORE_EXTRA
// Include Headers or Declare Types Here

#undef BEFORE_EXTRA

class ServerInstanceEventListener {

#define AFTER_EXTRA
// Add Member There

#undef AFTER_EXTRA

#ifndef DISABLE_CONSTRUCTOR_PREVENTION_SERVERINSTANCEEVENTLISTENER
public:
    class ServerInstanceEventListener& operator=(class ServerInstanceEventListener const&) = delete;
    ServerInstanceEventListener(class ServerInstanceEventListener const&) = delete;
    ServerInstanceEventListener() = delete;
#endif

public:
    /*
    inline int \/*enum enum EventResult*\/ onLeaveGameDone(struct ServerInstanceEvent const& a0){
        int \/*enum enum EventResult*\/ (ServerInstanceEventListener::*rv)(struct ServerInstanceEvent const&);
        *((void**)&rv) = dlsym("?onLeaveGameDone@ServerInstanceEventListener@@UEAA?AW4EventResult@@AEBUServerInstanceEvent@@@Z");
        return (this->*rv)(std::forward<struct ServerInstanceEvent const&>(a0));
    }
    inline int \/*enum enum EventResult*\/ onServerResume(class ServerInstance& a0){
        int \/*enum enum EventResult*\/ (ServerInstanceEventListener::*rv)(class ServerInstance&);
        *((void**)&rv) = dlsym("?onServerResume@ServerInstanceEventListener@@UEAA?AW4EventResult@@AEAVServerInstance@@@Z");
        return (this->*rv)(std::forward<class ServerInstance&>(a0));
    }
    inline int \/*enum enum EventResult*\/ onServerMinecraftInitialized(class ServerInstance& a0, class gsl::not_null<class Bedrock::NonOwnerPointer<class Minecraft> > const& a1){
        int \/*enum enum EventResult*\/ (ServerInstanceEventListener::*rv)(class ServerInstance&, class gsl::not_null<class Bedrock::NonOwnerPointer<class Minecraft> > const&);
        *((void**)&rv) = dlsym("?onServerMinecraftInitialized@ServerInstanceEventListener@@UEAA?AW4EventResult@@AEAVServerInstance@@AEBV?$not_null@V?$NonOwnerPointer@VMinecraft@@@Bedrock@@@gsl@@@Z");
        return (this->*rv)(std::forward<class ServerInstance&>(a0), std::forward<class gsl::not_null<class Bedrock::NonOwnerPointer<class Minecraft> > const&>(a1));
    }
    inline int \/*enum enum EventResult*\/ onServerInitializeEnd(class ServerInstance& a0){
        int \/*enum enum EventResult*\/ (ServerInstanceEventListener::*rv)(class ServerInstance&);
        *((void**)&rv) = dlsym("?onServerInitializeEnd@ServerInstanceEventListener@@UEAA?AW4EventResult@@AEAVServerInstance@@@Z");
        return (this->*rv)(std::forward<class ServerInstance&>(a0));
    }
    inline int \/*enum enum EventResult*\/ onServerInitializeStart(class ServerInstance& a0){
        int \/*enum enum EventResult*\/ (ServerInstanceEventListener::*rv)(class ServerInstance&);
        *((void**)&rv) = dlsym("?onServerInitializeStart@ServerInstanceEventListener@@UEAA?AW4EventResult@@AEAVServerInstance@@@Z");
        return (this->*rv)(std::forward<class ServerInstance&>(a0));
    }
    inline int \/*enum enum EventResult*\/ onServerSuspend(class ServerInstance& a0){
        int \/*enum enum EventResult*\/ (ServerInstanceEventListener::*rv)(class ServerInstance&);
        *((void**)&rv) = dlsym("?onServerSuspend@ServerInstanceEventListener@@UEAA?AW4EventResult@@AEAVServerInstance@@@Z");
        return (this->*rv)(std::forward<class ServerInstance&>(a0));
    }
    inline int \/*enum enum EventResult*\/ onStartLeaveGame(class ServerInstance& a0){
        int \/*enum enum EventResult*\/ (ServerInstanceEventListener::*rv)(class ServerInstance&);
        *((void**)&rv) = dlsym("?onStartLeaveGame@ServerInstanceEventListener@@UEAA?AW4EventResult@@AEAVServerInstance@@@Z");
        return (this->*rv)(std::forward<class ServerInstance&>(a0));
    }
    inline int \/*enum enum EventResult*\/ onServerUpdateEnd(class ServerInstance& a0){
        int \/*enum enum EventResult*\/ (ServerInstanceEventListener::*rv)(class ServerInstance&);
        *((void**)&rv) = dlsym("?onServerUpdateEnd@ServerInstanceEventListener@@UEAA?AW4EventResult@@AEAVServerInstance@@@Z");
        return (this->*rv)(std::forward<class ServerInstance&>(a0));
    }
    inline int \/*enum enum EventResult*\/ onServerThreadStopped(class ServerInstance& a0){
        int \/*enum enum EventResult*\/ (ServerInstanceEventListener::*rv)(class ServerInstance&);
        *((void**)&rv) = dlsym("?onServerThreadStopped@ServerInstanceEventListener@@UEAA?AW4EventResult@@AEAVServerInstance@@@Z");
        return (this->*rv)(std::forward<class ServerInstance&>(a0));
    }
    */

protected:

private:

};