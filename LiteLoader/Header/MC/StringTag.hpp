// This Header is auto generated by BDSLiteLoader Toolchain
#pragma once
#define AUTO_GENERATED
#include "../Global.h"
#include "Tag.hpp"

#define BEFORE_EXTRA
// Include Headers or Declare Types Here

#undef BEFORE_EXTRA

class StringTag : public Tag {

#define AFTER_EXTRA
// Add Member There
string val;

public:
    inline std::string& value() {
        return dAccess<std::string, 8>(this);
    }
    inline StringTag& operator=(std::string const& val) {
        value() = val;
        return *this;
    }
    inline static StringTag* create(std::string val = "") {
        StringTag* tag = (StringTag*)Tag::createTag(Tag::Type::String);
        *tag = val;
        return tag;
    }
    inline bool set(std::string const& val) {
        if (getTagType() != Tag::Type::String)
            return false;
        value() = val;
        return true;
    }
    inline std::string get() {
        return value();
    }

#undef AFTER_EXTRA

#ifndef DISABLE_CONSTRUCTOR_PREVENTION_STRINGTAG
public:
    class StringTag& operator=(class StringTag const&) = delete;
    StringTag(class StringTag const&) = delete;
#endif

public:
    /*0*/ virtual ~StringTag();
    /*1*/ virtual void deleteChildren();
    /*2*/ virtual void write(class IDataOutput&) const;
    /*3*/ virtual void load(class IDataInput&);
    /*4*/ virtual std::string toString() const;
    /*5*/ virtual int /*enum enum Tag::Type*/ getId() const;
    /*6*/ virtual bool equals(class Tag const&) const;
    /*7*/ virtual std::unique_ptr<class Tag> copy() const;
    /*8*/ virtual unsigned __int64 hash() const;
    /*
    inline  ~StringTag(){
         (StringTag::*rv)();
        *((void**)&rv) = dlsym("??1StringTag@@UEAA@XZ");
        return (this->*rv)();
    }
    */
    MCAPI StringTag(std::string);
    MCAPI StringTag();

protected:

private:

};