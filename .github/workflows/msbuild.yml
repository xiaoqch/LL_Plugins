name: Build Plugin

on: [push]

env:
  # Path to the solution file relative to the root of the project.
  SOLUTION_FILE_PATH: ./LL_Plugins.sln
  BDS_VERSION: 1.19.10.03

  # Configuration type to build.
  # You can convert this to a build matrix if you need coverage of multiple configuration types.
  # https://docs.github.com/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
  BUILD_CONFIGURATION: Release
  Platform: X64

jobs:
  build:
    runs-on: windows-2022

    steps:
    - uses: actions/checkout@v2
      with:
        submodules: 'true'

    - name: Download BDS
      working-directory: ${{env.GITHUB_WORKSPACE}}
      run: |
        mkdir LiteLoaderSDK/Tools/bedrock_server
        curl -L -o LiteLoaderSDK/Tools/bedrock_server/bedrock_server.zip https://minecraft.azureedge.net/bin-win/bedrock-server-${{ env.BDS_VERSION }}.zip
        unzip -q LiteLoaderSDK/Tools/bedrock_server/bedrock_server.zip -d LiteLoaderSDK/Tools/bedrock_server/
      shell: bash
      
    - name: Build Library
      working-directory: ${{env.GITHUB_WORKSPACE}}
      run: |
        cd LiteLoaderSDK/Tools
        LibraryBuilder.exe -o ../Lib ./bedrock_server
      shell: cmd

    - name: Set up Python 3.10
      uses: actions/setup-python@v3
      with:
        python-version: 3.10.4 

    - name: PreBuild
      working-directory: ${{env.GITHUB_WORKSPACE}}
      run: |
        python Scripts/prebuild_process.py --build_version ${{ github.run_number }} --release ${{startsWith(github.ref, 'refs/tags/v')}}
      shell: bash
      
    - name: Add MSBuild to PATH
      uses: microsoft/setup-msbuild@v1.1

#     - name: Restore NuGet packages
#       working-directory: ${{env.GITHUB_WORKSPACE}}
#       run: nuget restore ${{env.SOLUTION_FILE_PATH}}

    - name: Build Plugin
      working-directory: ${{env.GITHUB_WORKSPACE}}
      # Add additional options to the MSBuild command line here (like platform or verbosity level).
      # See https://docs.microsoft.com/visualstudio/msbuild/msbuild-command-line-reference
      run: |
        MSBuild.exe ${{env.SOLUTION_FILE_PATH}} -property:Configuration=${{env.BUILD_CONFIGURATION}}
      shell: bash
    
    # - name: copy dll and pdb files
    #   working-directory: ${{env.GITHUB_WORKSPACE}}
    #   run: |
    #     mkdir output/
    #     cp -f x64/Release/*.dll output/
    #     mkdir output/lib/
    #     cp -f x64/Release/*.pdb output/lib/
    #     rm output/Template.dll
    #     rm output/Lib/Template.pdb
    #   shell: bash

    - name: Classify Plugins
      working-directory: ${{env.GITHUB_WORKSPACE}}
      run: |
        python Scripts/postbuild_process.py -r "Output"
      shell: bash

    - name: upload files
      uses: actions/upload-artifact@v2
      with:
        name: LL_Plugins-actions-${{ github.run_number }}
        path: ${{ github.workspace }}/Output/

    - name: Archive
      working-directory: ${{env.GITHUB_WORKSPACE}}
      if: startsWith(github.ref, 'refs/tags/v')
      run: Compress-Archive -Path Output/* Output/LL_Plugins.zip

    - name: Prepare for creating Release
      working-directory: ${{env.GITHUB_WORKSPACE}}
      id: rel
      if: startsWith(github.ref, 'refs/tags/v')
      run: |
        echo ::set-output name=tag::${GITHUB_REF#refs/tags/*}
        mv Output/LL_Plugins.zip Output/LL_Plugins-${GITHUB_REF#refs/tags/*}.zip
      shell: bash

    - name: Create New Release
      uses: softprops/action-gh-release@v1
      if: startsWith(github.ref, 'refs/tags/v')
      with:
        token: ${{ secrets.ACTIONS_TOKEN }}
        body_path: ${{ github.workspace }}/CHANGELOG.md
        files: ${{ github.workspace }}/Output/LL_Plugins-${{ steps.rel.outputs.tag }}.zip
      env:
          GITHUB_REPOSITORY: ${{env.GITHUB_ACTION_REPOSITORY}} 
